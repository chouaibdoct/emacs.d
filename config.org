#+STARTUP: show2levels

* Emacs General
#+begin_src emacs-lisp :tangle (if (eq system-type 'windows-nt) "yes" "no")
(setq package-check-signature nil)
(use-package gnu-elpa-keyring-update
 :ensure t
 )
 (setq package-check-signature 'allow-unsigned )
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))

#+end_src
** Packages init
#+begin_src emacs-lisp :tangle yes
  (use-package package
    :config
    (add-to-list 'package-archives
                 '("melpa" . "https://melpa.org/packages/")
                 ;;		 '("org" . "https://orgmode.org/elpa/")
                 )
    (setq package-enable-at-startup nil)
    (add-to-list 'load-path "~/.emacs.d/lisp")
   ;; (package-initialize)
    )

  ;;   (setq package-enable-at-startup nil)

  ;;   (add-to-list 'package-archives
  ;;                '("melpa" . "https://melpa.org/packages/")
  ;;   ;;	     '("org" . "https://orgmode.org/elpa/")
  ;;                )
  ;;   ;;(add-to-list 'load-path "~/.emacs.d/lisp")
  ;; ;;  (require 'package)


  (use-package use-package
    :custom
    (use-package-always-ensure t)
    (package-native-compile t)
    (warning-minimum-level :error))
#+end_src
** general conf
#+begin_src emacs-lisp :tangle yes
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (when window-system (scroll-bar-mode -1))
  (setq inhibit-startup-message t)
  ;;      (set-face-attribute 'default nil :height 102)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
          ;;(set-fringe-mode 10)
          ;;(setq visible-bell 1)
  (setq split-height-threshold nil)  ;; for vertical split
  (setq split-width-threshold 120)

  (setq make-backup-files nil) ;; do not make backup files

  (setq display-time-24hr-format t)
  (setq display-time-format "|%H:%M  %d-%m-%Y|")
  (display-time-mode 1)
  (display-battery-mode 1)
  (add-hook 'prog-mode-hook 'electric-pair-mode)
  (global-auto-revert-mode 1)
          ;;(when window-system (add-hook 'prog-mode-hook 'global-hl-line-mode t))
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq scroll-conservatively 100)

  ;; (if window-system
  ;;     (global-set-key (kbd "<C-return>") 'ansi-term)
  ;;   (global-set-key (kbd "<C-RET>") 'ansi-term))

  (setq ring-bell-function 'ignore)
                                          ;(when window-system (global-hl-line-mode t))
  (global-prettify-symbols-mode t) 
  (setq make-backup-file nil)
  ;;(setq auto-save-default nil)
  ;;(line-number-mode t)
  (column-number-mode t)
  (show-paren-mode t) 
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(show-paren-match ((t (:background "green")))))
   ;only for doom-snazy
  ;; (setq show-paren-style 'mixed)
  ;; (global-set-key (kbd "C-M-h") 'mark-defun) 
  (setq custom-safe-themes t)

  ;;transparency
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun opacity (value)
     "Sets the transparency of the frame window. 0=transparent/100=opaque"
     (interactive "nTransparency Value 0 - 100 opaque:")
     (set-frame-parameter (selected-frame) 'alpha value))

#+end_src
*** copying/yank
#+begin_src emacs-lisp :tangle yes
  ;;;copy line
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defun kill-thing-at-point (thing)
    "Kill the `thing-at-point' for the specified kind of THING."
    (let ((bounds (bounds-of-thing-at-point thing)))
      (if bounds
          (kill-region (car bounds) (cdr bounds))
        (error "No %s at point" thing))))

  (defun copy-thing-at-point (thing)
    "Copy the `thing-at-point' for the specified kind of THING."
    (let ((bounds (bounds-of-thing-at-point thing)))
      (if bounds
          (copy-region-as-kill (car bounds) (cdr bounds))
        (error "No %s at point" thing))))

  (defun kill-word-at-point ()
    "Kill the word at point."
    (interactive)
    (kill-thing-at-point 'word))

  (defun copy-line-at-point ()
    "copy the line at point."
    (interactive)
    (copy-thing-at-point 'line))

  (defun copy-word-at-point()
    "copy the word at point"
    (interactive)
    (copy-thing-at-point 'word)
    )

  (defun kill-line-at-point()
    "kill the line at point"
    (interactive)
    (kill-thing-at-point 'line)
    )

  (global-set-key (kbd "C-d")  (quote copy-word-at-point))
  (global-set-key (kbd "M-d")  (quote kill-word-at-point))
  (global-set-key (kbd "M-k")  (quote copy-line-at-point))
  (global-set-key (kbd "s-k")  (quote kill-line-at-point))

#+end_src
*** delete
#+begin_src emacs-lisp :tangle yes
(pending-delete-mode t)
#+end_src
** window management
#+begin_src emacs-lisp :tangle yes
    ;; windows management 
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (global-set-key (kbd "C-x <up>") 'windmove-up)
    (global-set-key (kbd "C-x <down>") 'windmove-down)
    (global-set-key (kbd "C-x <left>") 'windmove-left)
    (global-set-key (kbd "C-x <right>") 'windmove-right)

    (global-set-key (kbd "C-x C-<right>") 'windmove-swap-states-right)
    (global-set-key (kbd "C-x C-<left>") 'windmove-swap-states-left)
    (global-set-key (kbd "C-x C-<down>") 'windmove-swap-states-down)
    (global-set-key (kbd "C-x C-<up>") 'windmove-swap-states-up)


    (global-set-key (kbd "C-x f") 'find-file-other-window)



    ;;(byte-recompile-file "~/.emacs.d/lisp/framemove.el")
    ;;(load "~/.emacs.d/lisp/framemove")
    ;;(require 'framemove)
    ;; (setq framemove-hook-into-windmove t)
    ;; (windmove-default-keybindings '(kdb "C-x"))
    (use-package framemove
      :load-path "~/.emacs.d/lisp/"
      ;; :defer t
      :config
      (setq framemove-hook-into-windmove t)
      )

    (defun split-and-follow-horizontally()
      (interactive)
      (split-window-below)
      ;;    (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

    (defun split-and-follow-vertically()
      (interactive)
      (split-window-right)
      ;;    (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically) 


  ;; (defun delete-window-when-kill-buffer()
  ;;   (interactive)
  ;;   (kill-buffer)
  ;;   (delete-window)
  ;;   )
  ;; (global-set-key (kbd "C-x k") 'delete-window-when-kill-buffer)
  ;; (global-set-key (kbd "C-x k") 'kill-buffer)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package golden-ratio
    :ensure t
    :config
  ;;(golden-ratio-mode)
    )
#+end_src
** hideshow
#+begin_src emacs-lisp :tangle yes
  (use-package hideshow
      :init (add-hook #'prog-mode-hook #'hs-minor-mode)
      :diminish hs-minor-mode

      :config
      (defun ll ()
      (interactive)
      (hs-hide-level 2))
      (define-key hs-minor-mode-map (kbd "C-*") 'hs-hide-level)

      (if (eq system-type 'darwin)
          (progn (define-key hs-minor-mode-map (kbd "C-+") 'hs-show-block)
                 (global-unset-key (kbd "C-_"))
                 (define-key hs-minor-mode-map (kbd "C-_") 'hs-hide-block)
                 )
        (progn (define-key hs-minor-mode-map (kbd "<C-kp-add>") 'hs-show-block)
               (define-key hs-minor-mode-map (kbd "<C-kp-subtract>") 'hs-hide-block)
               )
        )

      (add-hook 'c++-mode-hook 'll)
     ;;; Add `json-mode' and `javascript-mode' to the list
     ;;; (setq hs-special-modes-alist
     ;;; 	(mapcar 'purecopy
     ;;; 		'((js-mode "{" "}" "/[*/]" nil)
     ;;; 		  (json-mode "{" "}" "/[*/]" nil)
     ;;; 		  (javascript-mode  "{" "}" "/[*/]" nil))))
      )
#+end_src
** which-key/rainbow/vundo
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :diminish 
    :init (which-key-mode))

  (use-package rainbow-delimiters
    :ensure t
    :diminish
    :hook (prog-mode . rainbow-delimiters-mode)
    )

  (use-package gcmh
    :ensure t
    :hook
    (after-init-hook . gcmh-mode)
    :init
    (setq gcmh-idle-delay 5)
    (setq gcmh-high-cons-threshold (* 16 1024 1024)) ; 16MB
    (setq gcmh-verbose init-file-debug))

  ;; (use-package undo-tree
  ;;   :ensure t
  ;;   :diminish
  ;;   ;;    :bind ("C-M-u" . undo-tree-visualize )
  ;;   :config
  ;;   (global-undo-tree-mode))

  (use-package vundo
    :ensure t
    :init
    (setq vun-key (if (eq system-type 'darwin) "C--" "C-_"))
    :custom
    (vundo-compact-display t)
    (vundo-glyph-alist vundo-unicode-symbols)
    :config
    ;; :bind (("C--" . (lambda()(interactive) (undo) (vundo)))
    ;;        ("M--" . (lambda()(interactive) (undo-redo) (vundo)))
    ;;        :map vundo-mode-map
    ;;        ("C--" . vundo-backward)
    ;;        ("M--" . vundo-forward)
    ;;        )
    (if (eq system-type 'darwin)
        (progn
          (global-set-key (kbd "C--" ) (lambda()(interactive) (undo) (vundo)))
          (global-set-key (kbd "M--" ) (lambda()(interactive) (undo) (vundo)))
          (keymap-set vundo-mode-map  "C--" 'vundo-backward)
          (keymap-set vundo-mode-map  "M--" 'vundo-forward)
          )
      (progn
        (global-set-key (kbd "C-_" ) (lambda()(interactive) (undo) (vundo)))
        (global-set-key (kbd "M-_" ) (lambda()(interactive) (undo-redo) (vundo)))
        (keymap-set vundo-mode-map  "C-_" 'vundo-backward)
        (keymap-set vundo-mode-map  "M-_" 'vundo-forward)
        )
      )

    )
  ;;(global-unset-key (kbd "C--"))
#+end_src
** expand-region
#+begin_src emacs-lisp :tangle yes
(use-package expand-region
  :ensure t
  :bind (("C-M-SPC" . er/expand-region)
	 ("M--" . er/contract-region))
  )
#+end_src
* org-mode
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :defer t
    :config
    (setq org-hide-emphasis-markers t ;; for *bold* to look bold wothout stars 
          ;; org-ellipsis " ▾"
          org-pretty-entities t
          org-startup-with-inline-images t
          org-startup-indented t
          )

    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.15)
                    ))
      (set-face-attribute (car face) nil :weight 'medium  :height (cdr face))) ;; :weight 'medium  :height (cdr face)

    ;; (use-package org-bullets
    ;;   :hook (org-mode . org-bullets-mode)
    ;;   :defer t
    ;;   :config
    ;;   (setq org-bullets-bullet-list '(  "❖" "✸" "✮" "◉" "⁑" "⁂" )) ;;"✱" "◉" "○" "●" "○" "●" "○" "●"
    ;;   )

    :hook (;;(org-mode . org-indent-mode )
           (org-mode . visual-line-mode )
           )
    :bind  ( ("C-c a" . org-agenda)
             ("C-c c" . org-capture)
             ("C-c l" . org-store-link)
  	     ;;            :map org-mode-map

           )
    )

#+end_src

#+begin_src emacs-lisp :tangle yes

  (defun kill-other-org-buffers ()
  "Kill all .org buffers except 'inbox.org' and the current buffer."
  (interactive)
  (let ((current (current-buffer)))
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (let ((name (buffer-name)))
          (when (and (string-match-p "\\.org\\'" name)
                     (not (eq buf current))
                     (not (string-equal name "inbox.org")))
            (kill-buffer buf)))))))
  (setq 
        ;;	org-deadline-warning-days 14 ;;to warn n days before deadline date
        org-agenda-start-with-log-mode t
        org-log-done t
        org-log-into-drawer t
        org-directory "~/Dropbox/"
        org-agenda-files '("univ.org" "personal.org" "projects.org" "inbox.org" "research.org")
        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "|" "DONE(d)"))

        org-refile-targets '((org-agenda-files :maxlevel . 1))
        org-refile-use-outline-path 'file
        org-outline-path-complete-in-steps nil

        )

  (setq org-capture-templates
        `(("i" "Inbox" entry  (file "~/Dropbox/inbox.org")
           ,(concat "* TODO %?\n"
                    "/Entered on/ %U"))
          ;; ("@" "Inbox [mu4e]" entry (file "inbox.org")
          ;;  ,(concat "* TODO Process \"%a\" %?\n"
          ;;           "/Entered on/ %U"))
      	))

  (global-set-key (kbd "C-c n i" ) (lambda()(interactive) (find-file "~/Dropbox/inbox.org")))

  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
      (lambda ()
        (org-archive-subtree)
        (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
      "/DONE" 'file))



   (use-package alert
    :commands (alert)
    :config
    )

  (when (eq system-type 'windows-nt)
    (use-package alert-toast
      :after alert
      :config
      (setq alert-default-style 'alert-termux-notify)
      ))
  (when (eq system-type 'darwin)
    (setq alert-default-style 'osx-notifier)
    )

  ;; (use-package org-alert
  ;;   :ensure t
  ;;   :init
  ;;   (setq
  ;;    org-alert-interval 300
  ;;         )
  ;;   :config
  ;;   (when (daemonp)
  ;;    (org-alert-enable))
  ;;   )


#+end_src
** org-modern / olivetti
#+begin_src emacs-lisp :tangle yes
  (use-package org-modern
    :ensure t
    :after org
    :hook (org-mode . org-modern-mode)
    :config
    (custom-set-variables '(org-modern-fold-stars
     '(("▶" . "▼") ("▷" . "▽") ("◉" . "○") ("▹" . "▿") ("▸" . "▾") )))
    )
  (use-package olivetti
    :ensure t
    :defer t
    :init
    (setq olivetti-body-width .67)
    :config
    (olivetti-set-width 130)

    :hook (org-mode . olivetti-mode)
    )
#+end_src
** org-noter
#+begin_src emacs-lisp :tangle no
(use-package org-noter
  :config
  ;;  (setq org-noter-notes-search-path        '("~/your/path/to/notes"))
  ;;  (setq org-noter-default-notes-file-names '("notes.org"))
  (with-eval-after-load 'org-noter
    (setq org-noter-arrow-background-color "cyan"
	  org-noter-arrow-foreground-color "black"))
  :custom
  (org-noter-auto-save-last-location t)
  ;; (org-noter-notes-search-path        '("~/your/path/to/notes"))
  ;; (org-noter-default-notes-file-names '("notes.org"))
  ;;(org-noter-notes-window-behavior '(start scroll))
  (org-noter-always-create-frame nil)
  (org-noter-use-indirect-buffer t)

  ;; (org-noter-notes-window-location 'horizontal-split)
  ;; (org-noter-doc-split-fraction '(0.5 . 0.5))
  ;; (org-noter-disable-narrowing nil)
  ;; (org-noter-swap-window nil)
  ;; (org-noter-hide-other t)
  )
#+end_src
** xenops
#+begin_src emacs-lisp :tangle yes
  (use-package xenops
    :ensure t
    :defer t
    :config
    (setq xenops-math-image-scale-factor 1.5)

  					;  (setq xenops-reveal-on-entry nil)
  					;    :hook(org-mode . xenops-mode)
    (advice-add 'xenops-handle-paste :override (lambda()
  					       (interactive)
  					       (or (xenops-math-handle-paste)
  						   (xenops-handle-paste-default)
  						   (xenops-image-handle-paste))
  					       ))
    )
#+end_src
** minted for better exporting source codes
#+begin_src emacs-lisp :tangle yes :exports 
  (defun wtd/org-toggle-minted ()
    "Toggle whether or not Org should use minted for LaTeX."
    (interactive)
    (if (get 'wtd-org-minted-on-or-off 'state)
        (progn
          (setq org-latex-packages-alist (delete '("" "minted" nil) org-latex-packages-alist))
          (setq org-latex-src-block-backend 'verbatim)
          (setq org-latex-pdf-process '("latexmk -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))
          (put 'wtd-org-minted-on-or-off 'state nil)
          (message "Minted is off")
          )
      (progn
        (add-to-list 'org-latex-packages-alist '("" "minted" nil))
        (setq org-latex-src-block-backend 'minted)
        (setq org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
        (setq org-latex-minted-options    '(("frame" "single")))
        (put 'wtd-org-minted-on-or-off 'state t)
        (message "Minted is on; use pdflatex -shell-escape -interaction=nonstopmode")
        )
      )
    )

  ;; look at this config https://github.com/wdenton/.emacs.d/blob/master/init.org
  ;; and this blog https://www.miskatonic.org/2023/11/15/minted/
  ;; this use python/brew package pygments
#+end_src
* themes
#+begin_src emacs-lisp :tangle yes
    (use-package doom-themes
      :ensure t
      :defer t
      :config
      (doom-themes-visual-bell-config)
      )
    (use-package doom-modeline
        :ensure t
  ;;      :defer t
        :config
        (doom-modeline-mode)
        )

    (use-package ef-themes
        :ensure t
        :config
        ;; (setq ef-themes-mixed-fonts t
        ;; 	  ef-themes-variable-pitch-ui t)
        (load-theme 'ef-day)
        )

  (defun my/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'ef-light t))
      ('dark (load-theme 'ef-winter t))))

  (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src
* vertico / margilinea /savehist
#+begin_src emacs-lisp :tangle yes
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    )

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nill))
    :init (marginalia-mode)
    )

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src
* consult
#+begin_src emacs-lisp :tangle yes
  (use-package consult 
    :ensure t
    :demand t
    :bind (
           ("C-s" . consult-line)
  ;;	 ("C-s" . consult-line)

           ("C-x b" . consult-buffer)
           ("C-c i" . consult-imenu)
           ("C-c C-i" . consult-imenu-multi)
           ("C-x C-b" . consult-buffer-other-window)
           ("C-x j" . consult-bookmark)
           ("C-c b" . consult-project-buffer)
  ;;	 ("C-y" . consult-yank-from-kill-ring)
           ("M-y" . consult-yank-pop)
           ("M-g M-g" . consult-goto-line-numbers)
           ("C-x m" . consult-global-mark)

           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history)

           )
    :custom
    (completion-in-region-function #'consult-completion-in-region)

    ;; (consult-buffer-filter '("\\` " "\\`\\*.*\\*\\'"))
    ;; (consult-buffer-filter
    ;;  '("\\` " "\\`\\*Completions\\*\\'" "\\`\\*Flymake log\\*\\'" "\\`\\*Semantic SymRef\\*\\'" "\\`\\*tramp/.*\\*\\'" "\\`\\*EGLOT.*\\*\\'" "\\`\\*Async-native-compile-log*\\*\\'" "\\`\\*Messages*\\*\\'" "\\`\\*scratch*\\*\\'") )

      (consult-buffer-filter
     '("\\` " "\\`\\*Completions\\*\\'" "\\`\\*Flymake log\\*\\'" "\\`\\*Semantic SymRef\\*\\'" "\\`\\*tramp/.*\\*\\'" "\\`\\*EGLOT.*\\*\\'" "\\`\\*Async-native-compile-log*\\*\\'" "\\`\\*Messages*\\*\\'" "\\`\\*scratch*\\*\\'" "\\`\\*powershell-toast\\*\\'" "\\`\\*dashboard\\*\\'") )

    :hook (completion-list-mode . consult-preview-at-point-mode)

    :init
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config
    ;; (consult-customize
    ;;  consult-theme :preview-key '(:debounce 0.2 any)
    ;;  consult-ripgrep consult-git-grep consult-grep
    ;;  consult-bookmark consult-recent-file consult-xref
    ;;  consult--source-bookmark consult--source-file-register
    ;;  consult--source-recent-file consult--source-project-recent-file
    ;;  ;; :preview-key (kbd "M-.")
    ;;  :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.


    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    )
#+end_src
* orderless
#+begin_src emacs-lisp :tangle yes
  (use-package orderless
    :ensure t
    :custom
    ;; (completion-styles '(orderless basic))
    ;; (completion-category-overrides '((file (styles basic partial-completion)))))
    (completion-styles '(partial-completion orderless )) ;;flex flex initials partial-completion
    (completion-category-defaults nil )  ;;'((eglot (styles orderless)))
    ;; (completion-category-overrides '((eglot (styles orderless))))
      (completion-category-overrides     '((file (styles partial-completion))))
    )
#+end_src

* embark
#+begin_src emacs-lisp :tangle yes
  (use-package embark
    :ensure t
    :bind(("C-h B " . embark-bindings)
  ;;        :map minibuffer-local-map
          ("M-+" . embark-act)
          ("C-." . embark-dwim)

          )
    :init
    ;;  (setq prefix-help-command #'embark-prefix-help-command)
    ;;  (aqdd-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)

    )

  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))


#+end_src

* corfu
#+begin_src emacs-lisp :tangle yes
  (use-package corfu
    :ensure t
    ;;  :demand t
    :custom
    (corfu-auto t)
    (corfu-auto-delay 0.1)
    (corfu-auto-prefix 2)
    (corfu-echo-documentation 0.25)
    (corfu-preview-current 'insert)
    :init
    (global-corfu-mode)
    :config
    (defun corfu-move-to-minibuffer ()
      (interactive)
      (pcase completion-in-region--data
        (`(,beg ,end ,table ,pred ,extras)
         (let ((completion-extra-properties extras)
               completion-cycle-threshold completion-cycling)
           (consult-completion-in-region beg end table pred)))))
    (keymap-set corfu-map "M-m" #'corfu-move-to-minibuffer)
    (add-to-list 'corfu-continue-commands #'corfu-move-to-minibuffer)
    :hook (completion-in-region . corfu-move-to-minibuffer)

    )
#+end_src
* vterm
#+begin_src emacs-lisp :tangle (if (eq system-type 'windows-nt) "no"  "yes")
(use-package vterm
  :ensure t
  :config
  (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
  )

(use-package vterm-toggle
  :ensure t
  :bind ("<C-return>" . vterm-toggle)
  )
#+end_src
* yasnippet
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
      :ensure t
      :defer t
      :config

  ;;    (yas-reload-all)
      ;; (add-hook 'c++-mode-hook 'yas-minor-mode)
      ;; (add-hook 'c++-mode 'yas-reload-all)
      ;;(add-hook 'yas-global-mode-hook 'yas-reload-all)
      )
  (use-package yasnippet-snippets
        :ensure t
        :defer t
        )
#+end_src

* flyspell/jinx
#+begin_src emacs-lisp :tangle no
(use-package flyspell
  ;; :ensure t				
  :defer t
  :config
  (setq ispell-program-name "hunspell"
        ispell-default-dictionary "en_US")
  ;; (use-package consult-flyspell
  ;;   :ensure t
  ;;   :defer t
  ;;   )
  ;; (use-package flyspell-correct
  ;;   :ensure t
  ;;   :defer t
  ;;   )
  ;; :hook (text-mode . flyspell-mode)
  :bind (;;("M-<f7>" . flyspell-buffer)
	 :map flyspell-mode-map
	 ("<f7>" . flyspell-word)
         ("C-." . flyspell-correct-at-point)))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package jinx
    :hook (org-mode . global-jinx-mode)
    :config
     ;; (add-to-list 'vertico-multiform-categories
     ;;              '(jinx grid (vertico-grid-annotate . 20)))
    (vertico-multiform-mode 1)
    :bind (("M-$" . jinx-correct)
           ("C-M-$" . jinx-languages)))

#+end_src

* programming

** build / project 
#+begin_src emacs-lisp :tangle yes
(use-package ansi-color
  :hook (compilation-filter . ansi-color-compilation-filter))

;;(setq compile-command "cmake --build ./build")
#+end_src
** eglot
#+begin_src emacs-lisp :tangle yes
  (use-package eglot
    :ensure t
    :defer t
  ;;  :after (yasnippet) ;; flycheck  flymake
    :init
  ;;  (yas-global-mode 1)
    :config
    (with-eval-after-load 'eglot
          (add-to-list 'eglot-server-programs
              '((c++-mode c-mode c-ts-mode c++-ts-mode)
                   . ("clangd"
                         "-j=2"
                         "--log=error"
                         ;; "--malloc-trim"
                         "--background-index"
                         ;; "--background-index-priority=background" ;;; =background  ; low    ;normal 
                         "--clang-tidy"
                         ;; ;; "--cross-file-rename"
                         "--completion-style=detailed"
                         "--pch-storage=disk"
                         "--header-insertion=never"
                         ;; ;; "--header-insertion-decorators=0"
                         ))))
    (with-eval-after-load 'eglot
          (add-to-list 'eglot-server-programs
              '(qml-mode
                   . ("/usr/local/bin/qmlls" "--build-dir=~/qttest/gallery/build/"))))

    (with-eval-after-load 'eglot
            (add-to-list 'eglot-server-programs
                '(f90-mode
                     . ("fortls" "--notify_init" "--nthreads=4"))))
    :hook
    ((c-mode-common . eglot-ensure))
    :bind (:map eglot-mode-map
            ("M-RET" . eglot-code-actions)
            ("C-c r" . eglot-rename)
            ("C-c f" . eglot-format-buffer)
  ;;	  ("C-." . xref-find-definitions-other-window)
          ) 

    )
#+end_src

** eldoc-box
#+begin_src emacs-lisp :tangle yes
(use-package eldoc-box
  :ensure t
  :defer t
  :after eglot
  :config
  (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode t)
  )
#+end_src

** flymake / flycheck
#+begin_src emacs-lisp :tangle yes
  (use-package flymake
    :defer t
    :bind ( :map flymake-mode-map
            ("M-n" . flymake-goto-next-error)
            ("M-p" . flymake-goto-prev-error)

            )
    )
#+end_src
#+begin_src emacs-lisp :tangle no
(use-package flycheck
  :ensure t
  :defer t
  :bind (:map flycheck-mode-map
	     ("M-n" . flycheck-next-error)
	     ("M-p" . flycheck-previous-error)
	     )
    )
#+end_src


** cmake
#+begin_src emacs-lisp :tangle yes
(use-package cmake-mode
  :ensure t
  )
#+end_src


** Matlab
#+begin_src emacs-lisp :tangle yes
  (use-package matlab-mode
    :ensure t
    :defer t
    :mode ("\\.m$" . matlab-mode)
    :bind(:map matlab-mode-map
               ("M-;" . matlab-shell-locate-fcn))
    :init
    (setq matlab-shell-command "/Applications/Matlab_R2020b.app/bin/matlab")
    (setq matlab-shell-command-switches (list "-nodesktop"))
    )
#+end_src
* magit / diff-h

#+begin_src emacs-lisp :tangle yes
(use-package magit
  :ensure t
  :defer t
  :commands (magit-status)
  :bind ("C-x g" . magit-status)
  )

(use-package diff-hl
  :ensure t
  :defer t
  :config
  (global-diff-hl-mode 1)
  (diff-hl-flydiff-mode 1)
  (diff-hl-margin-mode 1)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  )

#+end_src

* emacs

#+begin_src emacs-lisp :tangle yes
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 1)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
  :config
  (setq hl-line-sticky-flag nil)
  (add-hook 'prog-mode-hook 'hl-line-mode)

  :bind( :map global-map
	 ("C-c p c" . recompile)
	 ("C-." . xref-find-definitions-other-window))
  
  )
#+end_src


* dashbord
#+begin_src emacs-lisp :tangle yes
  (use-package dashboard
    :ensure t
    :init
    (add-hook 'dashboard-after-initialize-hook #'kill-other-org-buffers)
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))

    )
#+end_src
* xref
#+begin_src emacs-lisp :tangle yes
  (use-package xref
    :config
    (setq xref-search-program
          (cond
           ((or (executable-find "ripgrep")
                (executable-find "rg"))
            'ripgrep)
           ((executable-find "ugrep")
            'ugrep)
           (t
            'grep))))
#+end_src
* restclient
#+begin_src emacs-lisp :tangle yes
(use-package restclient
  :ensure t
  :defer t
  )
#+end_src

* pdf-tools
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
    :ensure t
    :defer t
    :commands (pdf-view-mode pdf-tools-install)
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :hook   (
             ;; (pdf-view-mode . pdf-view-themed-minor-mode)
             (pdf-view-mode . pdf-tools-enable-minor-modes)
             )

    :config
    (pdf-tools-install)
    (setq pdf-view-resize-factor 1.1)
    (setq-default pdf-view-display-size 'fit-width)
    (define-pdf-cache-function pagelabels)
    (setq pdf-view-continuous nil)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    )


#+end_src


** saveplace-pdf-view
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-view-restore
  :after pdf-tools
  :config
  (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode)
  (setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore")
  )
#+end_src
** org-pdftools

#+begin_src emacs-lisp :tangle no
    (use-package org-pdftools
      :ensure t
  ;;    :after pdf-tools
      :config
      (defun denote-link-generator (FILENAME)
        (if (denote-file-has-identifier-p FILENAME)
            (denote-retrieve-filename-identifier FILENAME)
          (abbreviate-file-name FILENAME)
          )
        )

      (defun denote-link-resolver (ID/FILENAME)
        (if (denote--id-exists-p ID/FILENAME)
            (denote-get-relative-path-by-id ID/FILENAME)
          (expand-file-name ID/FILENAME)
          )
        )

      (setq org-pdftools-path-generator 'denote-link-generator
            org-pdftools-path-resolver 'denote-link-resolver)

      
      (org-pdftools-setup-link)
      )
    




#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package org-pdftools
    :ensure t
    :init
    (defalias 'getf 'cl-getf)
    :config
    (defun denote-link-generator (FILENAME)
      (if (denote-file-has-identifier-p FILENAME)
          (denote-retrieve-filename-identifier FILENAME)
        (abbreviate-file-name FILENAME)
        )
      )

    (defun denote-link-resolver (ID/FILENAME)
      ;;    (if (denote--id-exists-p ID/FILENAME)
      (message ID/FILENAME)
      (if (denote-get-relative-path-by-id ID/FILENAME)
          (denote-get-relative-path-by-id ID/FILENAME)
        (expand-file-name ID/FILENAME)
        )
      )

    (setq org-pdftools-path-generator 'denote-link-generator
          org-pdftools-path-resolver 'denote-link-resolver)

    (defun org-pdftools-export (link description format)
        "Export the pdfview LINK with DESCRIPTION for FORMAT from Org files."
        (let* (path loc page)
          (if (string-match "\\(.+\\)::\\(.*\\)" link)
              (progn
                (setq path (match-string 1 link))
                (setq loc (match-string 2 link))
                (if (string-match "\\([0-9]+\\)++\\(.*\\)" loc)
                    (setq page (match-string 1 loc))
                  (setq page loc))
                (setq path (funcall org-pdftools-path-resolver path))
                )

            (setq path link))

          ;; `org-export-file-uri` expands the filename correctly
          ;;    (setq path (org-export-file-uri (org-link-escape path)))

          (cond ((eq format 'html)
                 (format
                  "<a href=\"%s#page=%s\">%s</a>"
                  path
                  page
                  description))
                ((eq format 'latex)
                 (format
                  "\\href[page=%s]{%s}{%s}"
                  ;; "\\href{%s#page.%s}{%s}" 
                  page
                  path
                  description))
                ((eq format 'ascii)
                 (format "%s (%s)" description path))
                (t path))))

    
    (org-pdftools-setup-link)
    )

#+end_src
#+begin_src emacs-lisp :tangle no
  (use-package org-pdftools
    :load-path  "~/.emacs.d/lisp/"
    :config  (org-pdftools-setup-link))
#+end_src

* denote
#+begin_src emacs-lisp :tangle yes
  (use-package denote
    :ensure t
    :config
    ;;
    ;; General key bindings

    (setq denote-directory (expand-file-name
    			  (pcase system-type
    			    ('windows-nt "c:/Users/aliha/Documents/Zotero/")
  			    ('gnu/linux "~/pCloudDrive/Documents/Zotero/")
  			    (_ "~/Documents/Zotero/" ) 

    			    )))  

    ;;  (setq denote-known-keywords '("GC" "doct"))
    (setq denote-infer-keywords t)
    (setq denote-sort-keywords t)
    (setq denote-file-type 'org)
    (setq denote-rename-buffer-format "[D] %^s| %t")
    
    (denote-rename-buffer-mode)
    (setq denote-org-store-link-to-heading t)
    ;;
    ;; Tweaking the frontmatter
    ;; (setq denote-org-front-matter
    ;;       "#+title: %s\n#+date: %s\n#+filetags: %s\n#+identifier: %s\n#+author:\n#+startup: content\n")
    :bind
    ("C-c n n" . denote-open-or-create)
    ("C-c n l" . denote-link-or-create)
    ("C-c n b" . denote-link-find-file)
    ("C-c n B" . denote-link-backlinks)
    ("C-c n s" . denote-subdirectory)
    )
   
#+end_src

#+begin_src json :tangle no
for zotero
  {
  "4": {
    "field": "dateAdded",
    "operations": [
      {
        "function": "replace",
        "regex": "(\\d{4})-(\\d{2})-(\\d{2}) (.*)",
        "replacement": "$1$2$3T$4",
        "flags": "g"
      }
    ]
  },
  "5": {
    "field": "title",
    "operations": [
      {
        "function": "replace",
        "regex": "\\s",
        "replacement": "-",
        "flags": "g"
      }
    ]
  }
}

{%4}{==%a}{=%y}{--%5}

#+end_src

* citar
#+begin_src emacs-lisp :tangle yes
(use-package citar
  :no-require
  :custom
  (org-cite-global-bibliography '("~/Documents/Zotero/MyLib.bib"))
  (citar-bibliography '("~/Documents/Zotero/MyLib.bib"))
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography)
  (citar-library-paths (list denote-directory))
  :config
  (use-package citar-embark
    :ensure t
    :after citar embark
    :no-require
    :config
    (setq citar-at-point-function 'embark-act)
    (citar-embark-mode)
    )
  
  ;; optional: org-cite-insert is also bound to C-c C-x C-@
  :bind
  (("C-c d o" . citar-open)
   :map org-mode-map :package org
   ("C-c b" . #'org-cite-insert)))
#+end_src



* citar-denote
#+begin_src emacs-lisp :tangle yes
  (use-package citar-denote
    :after citar denote 
    :config
    (citar-denote-mode)
;;    (setq citar-open-always-create-notes t)
    (setq citar-denote-subdir t)
    (setq citar-denote-signature t)
    :bind (("C-c n c c" . citar-create-note)
           ("C-c n c a" . citar-denote-add-citekey)
           ("C-c n c x" . citar-denote-remove-citekey)
           ("C-c d c o" . citar-denote-open-note)
           ("C-c n c d" . citar-denote-dwim)
           ("C-c n c r" . citar-denote-find-reference)
           ("C-c n c f" . citar-denote-find-citation)
           ("C-c n c n" . citar-denote-find-nocite)))
#+end_src

* mac keys /specific
#+begin_src emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
    (add-to-list 'default-frame-alist '(undecorated . t)) 
    (menu-bar-mode 1)
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta)
    (setq mac-function-modifier 'control)
    (setq mac-right-command-modifier 'none)
    (setq mac-right-option-modifier 'none)


  (global-set-key (kbd "s-<up>") 'toggle-frame-maximized)
  (global-set-key (kbd "C-q") 'move-beginning-of-line)

    (global-set-key (kbd "C-x à") 'delete-window)
    (global-set-key (kbd "C-x &") 'delete-other-windows)
    (global-set-key (kbd "C-x à") 'delete-window)
    (global-set-key (kbd "C-x \" ") 'split-and-follow-vertically)
    (global-set-key (kbd "C-x é") 'split-and-follow-horizontally)

    ;;(set-face-attribute 'default nil :family "Inconsolata" :height 140)
    (set-face-attribute 'default nil :height 145)
    (defun frame-font-height (value)
         "Sets the frame font height default=12"
         (interactive "nFrame font height default =12:")
         (set-face-attribute 'default nil :height (* 10 value)))

    ;; (add-hook 'minibuffer-setup-hook 'my-minibuffer-setup)
    ;; (defun my-minibuffer-setup ()
    ;;        (set (make-local-variable 'face-remapping-alist)
    ;;           '((default :height 1.1))))



#+end_src



* windows specifics
#+begin_src emacs-lisp :tangle (if (eq system-type 'windows-nt) "yes" "no")
   ;; (add-to-list 'default-frame-alist '(undecorated . t)) 
   ;; (menu-bar-mode 1)

    (custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(default ((t (:family "JetBrains Mono" :foundry "outline" :slant normal :weight regular :height 105 :width normal))))
  '(show-paren-match ((t (:background "green")))))

     ;;(set-face-attribute 'default nil :family "Inconsolata" :height 140)
   (set-face-attribute 'default nil :height 105)
   (defun frame-font-height (value)
        "Sets the frame font height default=12"
        (interactive "nFrame font height default =12:")
        (set-face-attribute 'default nil :height (* 10 value)))

#+end_src

* emacs-plus

Emacs.app was installed to:
  /usr/local/opt/emacs-plus@29

To link the application to default Homebrew App location:
  osascript -e 'tell application "Finder" to make alias file to posix file "/usr/local/opt/emacs-plus@29/Emacs.app" at POSIX file "/Applications" with properties {name:"Emacs.app"}'

Your PATH value was injected into Emacs.app/Contents/Info.plist

Report any issues to https://github.com/d12frosted/homebrew-emacs-plus

To start d12frosted/emacs-plus/emacs-plus@29 now and restart at login:
  brew services start d12frosted/emacs-plus/emacs-plus@29
Or, if you don't want/need a background service you can just run:
  /usr/local/opt/emacs-plus@29/bin/emacs --fg-daemon
==> Summary
🍺  /usr/local/Cellar/emacs-plus@29/29.4: 4,540 files, 249.6MB, built in 12 minutes 31 seconds
==> Running `brew cleanup emacs-plus@29`...
Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).
==> Caveats
==> emacs-plus@29
Emacs.app was installed to:
  /usr/local/opt/emacs-plus@29

To link the application to default Homebrew App location:
  osascript -e 'tell application "Finder" to make alias file to posix file "/usr/local/opt/emacs-plus@29/Emacs.app" at POSIX file "/Applications" with properties {name:"Emacs.app"}'

Your PATH value was injected into Emacs.app/Contents/Info.plist

Report any issues to https://github.com/d12frosted/homebrew-emacs-plus

To start d12frosted/emacs-plus/emacs-plus@29 now and restart at login:
  brew services start d12frosted/emacs-plus/emacs-plus@29
Or, if you don't want/need a background service you can just run:
  /usr/local/opt/emacs-plus@29/bin/emacs --fg-daemon
➜  ~  osascript -e 'tell application "Finder" to make alias file to posix file "/usr/local/opt/emacs-plus@29/Emacs.app" at POSIX file "/Applications" with properties {name:"Emacs.app"}'
alias file Emacs.app of folder Applications of startup disk
